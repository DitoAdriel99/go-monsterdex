// Package echosimple Code generated by swaggo/swag. DO NOT EDIT
package echosimple

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/breed/{sub-breed}/list": {
            "get": {
                "description": "Get a list of dog sub breed",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all sub breed",
                "operationId": "get-sub-breeds",
                "parameters": [
                    {
                        "type": "string",
                        "format": "doberman",
                        "default": "doberman",
                        "description": "Sub-breed name",
                        "name": "sub-breed",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.DogSubBreedResponse"
                        }
                    }
                }
            }
        },
        "/breeds/list/all": {
            "get": {
                "description": "Get a list of all dog breeds",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all dog breeds",
                "operationId": "get-all-breeds",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.DogBreedsResponse"
                        }
                    }
                }
            }
        },
        "/dog/{id}": {
            "get": {
                "description": "Get Dog Detail By ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Dog Detail",
                "operationId": "get-dog-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "default": "uuid",
                        "description": "Dog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "put": {
                "description": "Update a dog",
                "produces": [
                    "application/json"
                ],
                "summary": "Update Dog",
                "operationId": "Update-dog",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "default": "uuid",
                        "description": "Dog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sub-breed data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.DogPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "description": "Delete a dog",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Dog",
                "operationId": "delete-dog",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "default": "uuid",
                        "description": "Dog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/dogs": {
            "get": {
                "description": "Get List of Dogs",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Dogs",
                "operationId": "get-dogs",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "post": {
                "description": "Create a dog",
                "produces": [
                    "application/json"
                ],
                "summary": "Create Dog",
                "operationId": "create-dogs",
                "parameters": [
                    {
                        "description": "Sub-breed data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.DogPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.DogBreedsResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entity.DogPayload": {
            "type": "object",
            "properties": {
                "breeds": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entity.DogSubBreedResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:2000",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Echo Swagger Example API",
	Description:      "This is a sample server server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
