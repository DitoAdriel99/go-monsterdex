// Package echosimple Code generated by swaggo/swag. DO NOT EDIT
package echosimple

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/login": {
            "post": {
                "description": "login a user",
                "produces": [
                    "application/json"
                ],
                "summary": "Login User",
                "operationId": "login-user",
                "parameters": [
                    {
                        "description": "Login Payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/monster": {
            "post": {
                "description": "create a Monsters",
                "produces": [
                    "application/json"
                ],
                "summary": "Create Monsters",
                "operationId": "create-monsters",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer your_token_here",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "description": "Monster Payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.MonsterPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/api/v1/monster/catch/{id}": {
            "post": {
                "description": "Update status of Monsters",
                "produces": [
                    "application/json"
                ],
                "summary": "Catch Monsters",
                "operationId": "catch-monsters",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer your_token_here",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "Monster ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/monster/status/{id}": {
            "put": {
                "description": "Update status of Monsters",
                "produces": [
                    "application/json"
                ],
                "summary": "Update Status Monsters",
                "operationId": "update-status-monsters",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer your_token_here",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "Monster ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status Payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.StatusPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/monster/{id}": {
            "put": {
                "description": "Update a Monsters",
                "produces": [
                    "application/json"
                ],
                "summary": "Update Monsters",
                "operationId": "update-monsters",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer your_token_here",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "Monster ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Monster Payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.MonsterPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/monsters": {
            "get": {
                "description": "Get a list of Monsters Or Get Detail of Monster using Query Param \"monster_id\"",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Monsters",
                "operationId": "get-monsters",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer your_token_here",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "ID of the monster",
                        "name": "monster_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Where monster name is (Charizard, Turquise)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Where monster is Catched (true, false)",
                        "name": "is_catched",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Type of monsters",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field (e.g., name, id)",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order type (e.g., asc, desc)",
                        "name": "order_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order type (e.g., asc, desc)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order type (e.g., asc, desc)",
                        "name": "per_page",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/register": {
            "post": {
                "description": "register a user",
                "produces": [
                    "application/json"
                ],
                "summary": "Register User",
                "operationId": "register-user",
                "parameters": [
                    {
                        "description": "Register Payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.RegisterPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Login": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "entity.MonsterPayload": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "height": {
                    "type": "number"
                },
                "image": {
                    "type": "string"
                },
                "monster_category_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "stats_attack": {
                    "type": "integer"
                },
                "stats_defense": {
                    "type": "integer"
                },
                "stats_hp": {
                    "type": "integer"
                },
                "stats_speed": {
                    "type": "integer"
                },
                "types_id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "entity.RegisterPayload": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "entity.StatusPayload": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "http://35.188.107.108",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Monsterdex Enpoints",
	Description:      "This is a sample server server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
